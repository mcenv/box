{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "mcx",
  "scopeName": "source.mcx",
  "patterns": [
    {
      "name": "comment.line.mcx",
      "match": "#.*"
    },
    {
      "name": "keyword.operator.mcx",
      "match": "[:*→=,;&`$_]|(?:\\.\\.)"
    },
    {
      "begin": "\\b(import)\\b\\s*{",
      "beginCaptures": {
        "1": {
          "name": "keyword.mcx"
        }
      },
      "end": "}",
      "patterns": [
        {
          "name": "entity.name.function.mcx",
          "match": "[^ \n\r:;,()\\[\\]{}⟨⟩]+(?:\\.[^ \n\r:;,()\\[\\]{}⟨⟩]+)*"
        }
      ]
    },
    {
      "match": "\\b(function) +([^ \n\r:;,()\\[\\]{}⟨⟩]+)",
      "captures": {
        "1": {
          "name": "keyword.mcx"
        },
        "2": {
          "name": "entity.name.function.mcx"
        }
      }
    },
    {
      "match": "\\b(type) +([^ \n\r:;,()\\[\\]{}⟨⟩]+)",
      "captures": {
        "1": {
          "name": "keyword.mcx"
        },
        "2": {
          "name": "support.type.mcx"
        }
      }
    },
    {
      "name": "keyword.mcx",
      "match": "@[^ \n\r:;,()\\[\\]{}⟨⟩]+"
    },
    {
      "name": "keyword.mcx",
      "match": "\\b(?:import|function|type)\\b"
    },
    {
      "name": "keyword.mcx",
      "match": "/(?:predicates|recipes|loot_tables|item_modifiers|advancements|dimension_type|worldgen/biome|dimension)\\b"
    },
    {
      "name": "support.type.mcx",
      "match": "\\b(?:bool|byte|short|int|long|float|double|string)\\b"
    },
    {
      "name": "keyword.control.mcx",
      "match": "\\b(?:fun|of|if|else|let|is)\\b"
    },
    {
      "name": "constant.language.mcx",
      "match": "\\b(?:true|false)\\b"
    },
    {
      "name": "constant.numeric.mcx",
      "match": "\\b(?:[-+]?(?:0|[1-9][0-9]*)[bsl]?)\\b"
    },
    {
      "name": "constant.numeric.mcx",
      "match": "\\b(?:[-+]?(?:[0-9]+\\.?|[0-9]*\\.[0-9]+)(?:e[-+]?[0-9]+)?[fd]?)\\b"
    },
    {
      "include": "#string"
    },
    {
      "name": "entity.name.function.mcx",
      "match": "[^ \n\r:;,()\\[\\]{}⟨⟩]+(?=⟨)"
    },
    {
      "name": "variable.mcx",
      "match": "[^ \n\r:;,()\\[\\]{}⟨⟩]+"
    }
  ],
  "repository": {
    "string": {
      "begin": "\"",
      "end": "\"",
      "name": "string.quoted.double.json",
      "patterns": [
        {
          "include": "#stringcontent"
        }
      ]
    },
    "stringcontent": {
      "patterns": [
        {
          "match": "\\\\(?:[\"\\\\])",
          "name": "constant.character.escape.mcx"
        },
        {
          "match": "\\\\.",
          "name": "invalid.illegal.mcx"
        }
      ]
    }
  }
}
