test def unit_of := if () [
  () -> true,
  _  -> false,
];

test def bool_of := if true [
  true -> true,
  _    -> false,
];

test def i8_of := if 1i8 [
  1i8 -> true,
  _   -> false,
];

test def i16_of := if 1i16 [
  1i16 -> true,
  _   -> false,
];

test def i32_of := if 1i32 [
  1i32 -> true,
  _    -> false,
];

test def i64_of := if 1i64 [
  1i64 -> true,
  _    -> false,
];

test def f32_of := if 1f32 [
  1f32 -> true,
  _    -> false,
];

test def f64_of := if 1f64 [
  1f64 -> true,
  _    -> false,
];

test def wtf16_of := if "" [
  "" -> true,
  _  -> false,
];

test def if_var := if true [
  x -> x,
];

test def if_true_var := if true [
  false -> false,
  x     -> x,
];

test def if_list_of := if [] [
  [] -> true,
  _  -> false,
];

test def if_list_of_true := if [true] [
  []  -> false,
  [x] -> x,
  _   -> false,
];

test def if_list_of_true_match := if [true] [
  [true] -> true,
  _     -> false,
];

test def if_list_of_nested := if [[]] [
  []   -> false,
  [[]] -> true,
  _    -> false,
];

test def if_compound_of := if {} [
  {} -> true,
  _  -> false,
];

test def if_compound_of_true := if {a: true} [
  {a: a} -> a,
  _      -> false,
];

test def if_compound_of_true_match := if {a: true} [
  {a: true} -> true,
  _         -> false,
];

test def if_compound_of_empty := if {a: false} [
  {}     -> true,
  {a: a} -> a,
  _      -> false,
];

test def if_compound_of_nested := if {a: {b: true}} [
  {a: {b: b}} -> b,
  _           -> false,
];

test def let_if :=
  let x := true;
  if {a: false} [
    {a: a} -> x,
    _      -> false
  ];

test def let_if_2 :=
  let x := true;
  let y := if {a: false} [
    {a: a} -> x,
    _      -> false
  ];
  x;

error def not_exhaustive : bool := if true [
  false -> false,
];
