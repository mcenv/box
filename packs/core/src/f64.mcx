import {
  core::bool::!,
}

export builtin def !=(f64, f64) : bool :=
  let _ as nothing := /"data modify storage mcx: byte append value 0b";
  let _ as nothing := /"data modify storage mcx: double append from storage mcx: double[-2]";
  /"execute store success storage mcx: byte[-1] byte 1 run data modify storage mcx: double[-1] set from storage mcx: double[-2]";

export def =(a : f64, b : f64) : bool := !(a != b);

export builtin def to_i8(f64) : i8 :=
  let _ as nothing := /"data modify storage mcx: byte append value 0b";
  /"execute store result storage mcx: byte[-1] byte 1 run data get storage mcx: double[-1]";

export builtin def to_i16(f64) : i16 :=
  let _ as nothing := /"data modify storage mcx: short append value 0s";
  /"execute store result storage mcx: short[-1] short 1 run data get storage mcx: double[-1]";

export builtin def to_i32(f64) : i32 :=
  let _ as nothing := /"data modify storage mcx: int append value 0";
  /"execute store result storage mcx: int[-1] int 1 run data get storage mcx: double[-1]";

export builtin def to_i64(f64) : i64 :=
  let _ as nothing := /"data modify storage mcx: long append value 0l";
  /"execute store result storage mcx: long[-1] long 1 run data get storage mcx: double[-1]";

export builtin def to_f32(f64) : f32 :=
  let _ as nothing := /"data modify storage mcx: float append value 0f";
  /"execute store result storage mcx: float[-1] float 1 run data get storage mcx: double[-1]";

export def to_f64(self : f64) : f64 := self;

export builtin def to_str(f64) : str :=
  /"data modify storage mcx: string append string storage mcx: double[-1]";
